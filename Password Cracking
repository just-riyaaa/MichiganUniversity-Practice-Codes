#password cracking
import zipfile
import itertools
import string
import time

def show_legal_warning():
    print("\n‚ö†Ô∏è WARNING: Unauthorized password cracking is illegal.")
    print("Under U.S. federal law, it violates the **Computer Fraud and Abuse Act (CFAA)**.")
    print("Maximum penalty: Up to 10 years imprisonment and/or significant fines for first offenses.\n")

def dictionary_attack(zip_filename, dictionary_filename):
    try:
        with zipfile.ZipFile(zip_filename) as zf:
            with open(dictionary_filename, 'r', errors='ignore') as f:
                for line in f:
                    password = line.strip()
                    try:
                        zf.extractall(pwd=bytes(password, 'utf-8'))
                        print(f"‚úÖ Dictionary attack succeeded with password: {password}")
                        return password
                    except:
                        continue
    except FileNotFoundError:
        print("‚ö†Ô∏è File not found. Check file paths.")
    return None

def brute_force_attack(zip_filename):
    charset = string.ascii_lowercase  # a-z
    try:
        with zipfile.ZipFile(zip_filename) as zf:
            for length in range(1, 9):  # Try lengths from 1 to 8
                for guess in itertools.product(charset, repeat=length):
                    password = ''.join(guess)
                    try:
                        zf.extractall(pwd=bytes(password, 'utf-8'))
                        print(f"‚úÖ Brute-force attack succeeded with password: {password}")
                        return password
                    except:
                        continue
    except FileNotFoundError:
        print("‚ö†Ô∏è ZIP file not found.")
    return None

def main():
    show_legal_warning()

    while True:
        method = input("Choose method (dictionary, brute, both, q to quit): ").lower()

        if method == 'q':
            print("üëã Exiting. Stay safe.")
            break
        elif method in ['dictionary', 'brute', 'both']:
            zip_file = input("Enter path to the .zip file: ")

            password = None

            if method in ['dictionary', 'both']:
                dict_file = input("Enter path to the dictionary file: ")
                start = time.time()
                password = dictionary_attack(zip_file, dict_file)
                end = time.time()
                print(f"üïí Dictionary attack took {end - start:.2f} seconds.\n")

            if method in ['brute', 'both'] and password is None:
                start = time.time()
                password = brute_force_attack(zip_file)
                end = time.time()
                print(f"üïí Brute-force attack took {end - start:.2f} seconds.\n")

            if password is None:
                print("‚ùå Password could not be cracked.\n")
        else:
            print("Invalid option. Please enter 'dictionary', 'brute', 'both', or 'q'.\n")

if __name__ == "__main__":
    main()

'''
Theory:
This Python script is designed to attempt to crack the password of a password-protected ZIP file using two common techniques: a **dictionary attack** and a **brute-force attack**.
* Dictionary Attack: This method tries to guess the password by iterating through a list of words (the dictionary file). Each word in the file is treated as a potential password and used to attempt to extract the contents of the ZIP file. This is effective if the password is a common word or phrase.
* Brute-Force Attack: This method systematically tries all possible combinations of characters within a defined set and up to a certain length. In this script, it attempts lowercase English letters ('a' to 'z') for passwords of length 1 to 4. This method is more computationally intensive but can find passwords not present in dictionaries.
The script uses the `zipfile` module to interact with ZIP archives, attempting to extract files using potential passwords. The `itertools` module is used in the brute-force attack to efficiently generate all possible character combinations. The `string` module provides the set of lowercase letters. The `time` module is used to measure the execution time of the cracking attempts.
The script first displays a legal warning about the unauthorized use of password cracking. It then enters a loop where the user can choose to perform a dictionary attack, a brute-force attack, both, or quit. It prompts for the ZIP file name and, for the dictionary attack, the dictionary file name.

Step-wise Explanation:
1. `show_legal_warning()` Function:
    * Prints a warning message to the user about the illegality and potential penalties of unauthorized password cracking under the U.S. Computer Fraud and Abuse Act (CFAA).
2. `dictionary_attack(zip_file, dictionary_file)` Function:
    * Takes the filenames of the ZIP file and the dictionary file as input.
    * Uses a `try-except` block to handle potential errors during file opening.
    * Opens the ZIP file in binary read mode (`'rb'`) using `zipfile.ZipFile`. The `with` statement ensures the file is properly closed.
    * Opens the dictionary file in text read mode (`'r'`) using `open()`.
    * Iterates through each `word` in the dictionary file.
    * Removes leading and trailing whitespace from the `word` using `.strip()` and assigns it to the `password` variable.
    * Uses a nested `try-except` block to attempt to extract all files from the ZIP archive using `zf.extractall(pwd=bytes(password, 'utf-8'))`. The password needs to be encoded as bytes using UTF-8.
    * If the extraction is successful (correct password), it prints a success message including the found `password` and returns the `password`.
    * If an exception occurs during extraction (incorrect password), the `except` block uses `continue` to move to the next word in the dictionary.
    * If the loop finishes without finding a password, it prints a "Password not found in dictionary." message and returns `None`.
    * If an error occurs while opening the files, it prints an "Error opening files." message and returns `None`.
3. `brute_force_attack(zip_file)` Function:
    * Takes the filename of the ZIP file as input.
    * Defines the character set `letters` as lowercase English letters using `string.ascii_lowercase`.
    * Uses a `try-except` block to handle potential errors during ZIP file opening.
    * Opens the ZIP file in binary read mode (`'rb'`) using `zipfile.ZipFile`.
    * Iterates through password lengths from 1 to 4 (exclusive of 5) using `for length in range(1, 5):`.
    * For each `length`, it generates all possible combinations (Cartesian product) of characters from `letters` with the current `length` using `itertools.product()`.
    * For each `guess` (a tuple of characters), it joins them into a string `password`.
    * Uses a nested `try-except` block to attempt to extract all files from the ZIP archive using the generated `password` (encoded as bytes).
    * If the extraction is successful, it prints a success message including the found `password` and returns the `password`.
    * If an exception occurs (incorrect password), the `except` block uses `continue` to try the next combination.
    * If the loops finish without finding a password, it prints a "Brute force failed to find the password." message and returns `None`.
    * If an error occurs while opening the ZIP file, it prints an "Error opening ZIP file." message and returns `None`.
4. `main()` Function:
    * Calls `show_legal_warning()` to display the legal disclaimer.
    * Enters an infinite `while True` loop to allow the user to perform multiple attempts or quit.
    * Prompts the user to choose a cracking `choice` ('dictionary', 'brute', 'both', or 'q' to quit) and converts the input to lowercase.
    * If the `choice` is "q", it prints "Goodbye!" and breaks out of the loop.
    * Prompts the user to enter the ZIP file name.
    * If the `choice` is "dictionary":
        * Prompts for the dictionary file name.
        * Records the start time using `time.time()`.
        * Calls the `dictionary_attack()` function.
        * Prints the total time taken for the dictionary attack.
    * If the `choice` is "brute":
        * Records the start time.
        * Calls the `brute_force_attack()` function.
        * Prints the total time taken for the brute-force attack.
    * If the `choice` is "both":
        * Prompts for the dictionary file name.
        * Records the start time.
        * Calls `dictionary_attack()`. The return value (`found`) indicates if a password was found.
        * If `found` is `None` (password not found in the dictionary), it calls `brute_force_attack()`.
        * Prints the total time taken for both attempts.
    * If the `choice` is invalid, it prints an "Invalid choice. Try again." message.
5.  if __name__ == "__main__":` Block:
    * This ensures that the `main()` function is executed only when the script is run directly (not when it's imported as a module).

Conclusion:
This script implements two fundamental password cracking techniques for ZIP files. The dictionary attack is faster but limited to words in the provided dictionary. The brute-force attack is more comprehensive but can be extremely time-consuming, especially for longer or more complex passwords. The script emphasizes the importance of ethical and legal use by displaying a legal warning. It provides a basic framework for understanding these cracking methods and their limitations.
'''
