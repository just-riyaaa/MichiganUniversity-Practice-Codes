#Body Mass Index
import math
import matplotlib.pyplot as plt

def calculate_bmi(weight, height):
    height_m = height / 100.0
    return weight / (height_m ** 2)

def estimate_weight(chest_diameter, chest_depth, bitrochanteric_diameter, wrist_girth, ankle_girth, height):
    return -110 + (1.34 * chest_diameter) + (1.54 * chest_depth) + (1.20 * bitrochanteric_diameter) + \
           (1.11 * wrist_girth) + (1.15 * ankle_girth) + (0.177 * height)

def linear_regression(x, y):
    n = len(x)
    sum_x = sum(x)
    sum_y = sum(y)
    sum_x_sq = sum([i ** 2 for i in x])
    sum_y_sq = sum([i ** 2 for i in y])
    sum_xy = sum([x[i] * y[i] for i in range(n)])

    slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x_sq - sum_x ** 2)
    intercept = (sum_y - slope * sum_x) / n
    return slope, intercept

def correlation(x, y):
    n = len(x)
    sum_x = sum(x)
    sum_y = sum(y)
    sum_x_sq = sum([i ** 2 for i in x])
    sum_y_sq = sum([i ** 2 for i in y])
    sum_xy = sum([x[i] * y[i] for i in range(n)])

    numerator = (n * sum_xy - sum_x * sum_y)
    denominator = math.sqrt((n * sum_x_sq - sum_x ** 2) * (n * sum_y_sq - sum_y ** 2))

    return numerator / denominator if denominator != 0 else 0

def main():
    file = open("body.dat", "r")
    lines = file.readlines()

    age_list = []
    bmi_list = []

    weight_list = []
    estimated_weight_list = []

    for line in lines:
        data = line.strip().split()
        age = float(data[1])
        weight = float(data[22])  # kg
        height = float(data[23])  # cm

        chest_diameter = float(data[5])
        chest_depth = float(data[6])
        bitrochanteric_diameter = float(data[10])
        wrist_girth = float(data[17])
        ankle_girth = float(data[19])

        bmi = calculate_bmi(weight, height)
        est_weight = estimate_weight(chest_diameter, chest_depth, bitrochanteric_diameter, wrist_girth, ankle_girth, height)

        age_list.append(age)
        bmi_list.append(bmi)
        weight_list.append(weight)
        estimated_weight_list.append(est_weight)

    slope1, intercept1 = linear_regression(age_list, bmi_list)
    corr1 = correlation(age_list, bmi_list)

    slope2, intercept2 = linear_regression(weight_list, estimated_weight_list)
    corr2 = correlation(weight_list, estimated_weight_list)

    print(f"Age vs BMI Regression: slope = {slope1:.3f}, intercept = {intercept1:.3f}, correlation = {corr1:.3f}")
    print(f"Weight vs Estimated Weight Regression: slope = {slope2:.3f}, intercept = {intercept2:.3f}, correlation = {corr2:.3f}")

    plt.subplot(2, 1, 1)
    plt.scatter(age_list, bmi_list, color='blue', label='Data Points')
    reg_line1 = [slope1 * x + intercept1 for x in age_list]
    plt.plot(age_list, reg_line1, color='red', label='Regression Line')
    plt.title('Age vs BMI')
    plt.xlabel('Age')
    plt.ylabel('BMI')
    plt.legend()

    plt.subplot(2, 1, 2)
    plt.scatter(weight_list, estimated_weight_list, color='green', label='Data Points')
    reg_line2 = [slope2 * x + intercept2 for x in weight_list]
    plt.plot(weight_list, reg_line2, color='orange', label='Regression Line')
    plt.title('Actual vs Estimated Weight')
    plt.xlabel('Actual Weight (kg)')
    plt.ylabel('Estimated Weight (kg)')
    plt.legend()

    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()
